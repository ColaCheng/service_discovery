version: 2.1

orbs:
  rebar3: tsloughter/rebar3@0.7.0
  gcp-gcr: circleci/gcp-gcr@0.6.0
  gcp-gke: circleci/gcp-gke@0.1.0
  docker: circleci/docker@0.5.13

executors:
  erlang_postgres:
    docker:
      - image: circleci/erlang:22
        entrypoint: ["/bin/sh"]
        environment:
          ERL_FLAGS: "+S 2"
      - image: circleci/postgres:11-alpine-ram
        environment:
          POSTGRES_USER: discovery
          POSTGRES_PASSWORD: password
          POSTGRES_DB: discovery

jobs:
  docker-build-and-push:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: Install latest Docker
          command: |
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install docker-ce

            docker version

            mkdir -p ~/.docker/cli-plugins
            wget https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
            mv buildx-v0.3.1.linux-amd64 ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
      - checkout
      - gcp-gcr/gcr-auth
      - run:
          name: Build and push images
          command: |
            # need the docker-container driver for push without load to work
            ~/.docker/cli-plugins/docker-buildx create --driver docker-container --use
            ci/build_images.sh -p -t runner -r us.gcr.io/adoptingerlang
  deploy:
    machine: true
    steps:
      - checkout
      - gcp-gke/install
      - gcp-gke/init
      - run:
          command: |
            opsys=linux
            curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest |\
              grep browser_download |\
              grep $opsys |\
              cut -d '"' -f 4 |\
              xargs curl -O -L
            sudo mv kustomize_*_${opsys}_amd64 /usr/local/bin/kustomize
            sudo chmod u+x /usr/local/bin/kustomize
      - run:
          command: |
            # setup kubectl to use stage cluster
            gcloud config set compute/zone us-central1-c
            gcloud container clusters get-credentials adoptingerlang-stage

            # using kustomize instead of kubectl apply -k because we need to edit the image
            # set image for stage to current git ref
            pushd deployment/overlays/stage
            kustomize edit set image service_discovery=us.gcr.io/adoptingerlang/service_discovery:$(git rev-parse HEAD)
            popd
            kustomize build deployment/overlays/stage
            kustomize build deployment/overlays/stage | kubectl apply -f -

workflows:
  build-test-maybe-deploy:
    jobs:
      - rebar3/compile
      - rebar3/xref:
          requires:
            - rebar3/compile
      - rebar3/dialyzer:
          requires:
            - rebar3/compile
      - rebar3/ct:
          executor: erlang_postgres
          pre-steps:
            - checkout
            - restore_cache:
                keys: flyway-5.2.4-1
            - run:
                name: Run SQL migrations
                command: |
                  if [ ! -f "/tmp/flyway-5.2.4/flyway" ]; then
                    wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.2.4/flyway-commandline-5.2.4-linux-x64.tar.gz | tar xvz -C /tmp
                  fi
                  /tmp/flyway-5.2.4/flyway -url=jdbc:postgresql://localhost:5432/discovery \
                                           -user=discovery \
                                           -password=password \
                                           -connectRetries=60 \
                                           -locations=filesystem:apps/service_discovery_postgres/priv/migrations \
                                           migrate
            - save_cache:
                key: flyway-5.2.4-1
                paths:
                  - /tmp/flyway-5.2.4

          requires:
            - rebar3/compile
      - rebar3/cover:
          requires:
            - rebar3/ct

      - docker-build-and-push:
          requires:
          - rebar3/ct
          - rebar3/dialyzer
          - rebar3/xref

      - deploy:
          requires:
          - docker-build-and-push
          filters:
            branches:
              only: stage
